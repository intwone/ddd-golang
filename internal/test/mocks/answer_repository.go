// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/forum/application/repositories/answer_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	enterprise "github.com/intwone/ddd-golang/internal/domain/forum/enterprise"
)

// MockAnswerRepositoryInterface is a mock of AnswerRepositoryInterface interface.
type MockAnswerRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAnswerRepositoryInterfaceMockRecorder
}

// MockAnswerRepositoryInterfaceMockRecorder is the mock recorder for MockAnswerRepositoryInterface.
type MockAnswerRepositoryInterfaceMockRecorder struct {
	mock *MockAnswerRepositoryInterface
}

// NewMockAnswerRepositoryInterface creates a new mock instance.
func NewMockAnswerRepositoryInterface(ctrl *gomock.Controller) *MockAnswerRepositoryInterface {
	mock := &MockAnswerRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAnswerRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnswerRepositoryInterface) EXPECT() *MockAnswerRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAnswerRepositoryInterface) Create(answer *enterprise.Answer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", answer)
}

// Create indicates an expected call of Create.
func (mr *MockAnswerRepositoryInterfaceMockRecorder) Create(answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAnswerRepositoryInterface)(nil).Create), answer)
}

// DeleteByID mocks base method.
func (m *MockAnswerRepositoryInterface) DeleteByID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockAnswerRepositoryInterfaceMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockAnswerRepositoryInterface)(nil).DeleteByID), id)
}

// GetByID mocks base method.
func (m *MockAnswerRepositoryInterface) GetByID(id string) (enterprise.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(enterprise.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAnswerRepositoryInterfaceMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAnswerRepositoryInterface)(nil).GetByID), id)
}

// GetManyByQuestionID mocks base method.
func (m *MockAnswerRepositoryInterface) GetManyByQuestionID(page int64, questionID string) ([]enterprise.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyByQuestionID", page, questionID)
	ret0, _ := ret[0].([]enterprise.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyByQuestionID indicates an expected call of GetManyByQuestionID.
func (mr *MockAnswerRepositoryInterfaceMockRecorder) GetManyByQuestionID(page, questionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyByQuestionID", reflect.TypeOf((*MockAnswerRepositoryInterface)(nil).GetManyByQuestionID), page, questionID)
}

// Save mocks base method.
func (m *MockAnswerRepositoryInterface) Save(answer *enterprise.Answer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", answer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAnswerRepositoryInterfaceMockRecorder) Save(answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAnswerRepositoryInterface)(nil).Save), answer)
}
