// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/hasher/hasher.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHasherInterface is a mock of HasherInterface interface.
type MockHasherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHasherInterfaceMockRecorder
}

// MockHasherInterfaceMockRecorder is the mock recorder for MockHasherInterface.
type MockHasherInterfaceMockRecorder struct {
	mock *MockHasherInterface
}

// NewMockHasherInterface creates a new mock instance.
func NewMockHasherInterface(ctrl *gomock.Controller) *MockHasherInterface {
	mock := &MockHasherInterface{ctrl: ctrl}
	mock.recorder = &MockHasherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHasherInterface) EXPECT() *MockHasherInterfaceMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *MockHasherInterface) Compare(value, hashed string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", value, hashed)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Compare indicates an expected call of Compare.
func (mr *MockHasherInterfaceMockRecorder) Compare(value, hashed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockHasherInterface)(nil).Compare), value, hashed)
}

// Hash mocks base method.
func (m *MockHasherInterface) Hash(value string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", value)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockHasherInterfaceMockRecorder) Hash(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockHasherInterface)(nil).Hash), value)
}
