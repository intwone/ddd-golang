// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/notification/application/repositories/notifications_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	enterprise "github.com/intwone/ddd-golang/internal/domain/notification/enterprise"
)

// MockNotificationsRepositoryInterface is a mock of NotificationsRepositoryInterface interface.
type MockNotificationsRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsRepositoryInterfaceMockRecorder
}

// MockNotificationsRepositoryInterfaceMockRecorder is the mock recorder for MockNotificationsRepositoryInterface.
type MockNotificationsRepositoryInterfaceMockRecorder struct {
	mock *MockNotificationsRepositoryInterface
}

// NewMockNotificationsRepositoryInterface creates a new mock instance.
func NewMockNotificationsRepositoryInterface(ctrl *gomock.Controller) *MockNotificationsRepositoryInterface {
	mock := &MockNotificationsRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockNotificationsRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationsRepositoryInterface) EXPECT() *MockNotificationsRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNotificationsRepositoryInterface) Create(notification *enterprise.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNotificationsRepositoryInterfaceMockRecorder) Create(notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationsRepositoryInterface)(nil).Create), notification)
}

// GetByID mocks base method.
func (m *MockNotificationsRepositoryInterface) GetByID(id string) (*enterprise.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*enterprise.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockNotificationsRepositoryInterfaceMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockNotificationsRepositoryInterface)(nil).GetByID), id)
}

// Save mocks base method.
func (m *MockNotificationsRepositoryInterface) Save(answer *enterprise.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", answer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockNotificationsRepositoryInterfaceMockRecorder) Save(answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockNotificationsRepositoryInterface)(nil).Save), answer)
}
